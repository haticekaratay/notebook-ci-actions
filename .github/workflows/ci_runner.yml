on:
  workflow_call:
      secrets:
        CASJOBS_USERID:
          description: 'CASJOBS user ID'
          required: false
        CASJOBS_PW:
          description: 'CASJOBS password'
          required: false
env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
  
#permissions:
#  id-token: write
##  contents: write
#  issues: write
#  pull-requests: write
  
jobs:
  gather-notebooks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
    ## routine to gather only the changed notebook files and supply them to the matrix
    - name: changed-files
      id: get-changed-files
      uses: tj-actions/changed-files@v36
      with:
        separator: ","
        files: |
          **/*.ipynb
    ## convert the list of files to an array and push them into the matrix as a json object      
    - name: set-matrix
      id: set-matrix
      run: |
        IFS=',' read -r -a array <<< "${{steps.get-changed-files.outputs.all_changed_files}}"
        echo "{$array}"
        echo "matrix=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${array[@]}")" >> $GITHUB_OUTPUT
  notebook-execution:
    needs: gather-notebooks
    environment: ci_env
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
        fail-fast: false
        matrix:
            notebooks: ${{ fromJson(needs.gather-notebooks.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python 3.8.12
        uses: actions/setup-python@v4 ## needed for caching
        with:
          python-version: 3.8.12
          cache: 'pip'
      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          ## Install the local requirements file
          echo DEBUG ---
          pwd ## print working directory
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          #pip install -r $(dirname "${{ matrix.notebooks }}")/requirements.txt
          pip install -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          pip install pytest
          pip install nbval
          pip install nbconvert
          pip install bandit
          
      - name: Security testing with Bandit
        run: | 
          bandit "${{ matrix.notebooks }}"
          
      - name: Execute notebooks
        id: execute
        run: |
          export CASJOBS_PW="$CI_CASJOBS_PW"
          export CASJOBS_USERID="$CI_CASJOBS_USERID"
          jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}
          
      - name: Validate notebooks 
        run: |
         jupyter nbconvert --clear-output --inplace "${{ matrix.notebooks }}" 
         pytest --nbval "${{ matrix.notebooks }}" 
         
      - name: Archive executed notebooks
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b gh-storage
          git add ${{ matrix.notebooks }}
          git commit -a -m "Add changes"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-storage

#        run: |
#          git config pull.rebase false
#          git config --global user.name "GitHub Actions"
#          git config --global user.email "actions@github.com"
#          git checkout -b gh-storage
#          git add ${{ matrix.notebooks }}
#          git commit -m 'Added executed notebook ${{ matrix.notebooks }}'
#          ATTEMPTS_LEFT=3
#          until [ $ATTEMPTS_LEFT -lt 1 ]
#          do
#            git pull origin gh-storage -s recursive -X ours --allow-unrelated-histories
#            git push origin gh-storage 2>&1 | tee output.log
#            if grep -q "Updates were rejected because the remote contains work" output.log; then
#              echo "Push failed due to conflicting remote changes. Remaining attempts: $ATTEMPTS_LEFT"
#              let "ATTEMPTS_LEFT--"
##              sleep 5
 #           else
 #             break
 #           fi
 #         done
          
